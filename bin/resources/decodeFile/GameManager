// Assembly-CSharp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// GameManager
using System;
using System.Collections.Generic;
using System.IO;
using UnityEngine;

public class GameManager : MonoBehaviour
{
	public static GameManager manager;

	private const string _GAMENAME = "Battle SSAFY";

	private const int _VERSION_MAJOR = 1;

	private const int _VERSION_MINOR = 1;

	private const int _VERSION_PATCH = 11;

	private const int _VERSION_RELEASE = 0;

	private const int _VERSION_BUILD = 0;

	private const string _LOGFILE = "battle_ssafy.log";

	private MODE currentMode;

	private STATE currentState;

	private PROCEED currentProceed;

	private NETWORK currentNetwork;

	private int connectingClient = -1;

	private bool isTurnGoing;

	private bool isTurnPassed;

	private int currentWidth = 1280;

	private int currentHeight = 720;

	private bool isFullscreen;

	private int currentStage;

	private int currentSpeed = 1;

	private int currentPlayer;

	private int currentStars;

	private Team team;

	private User user;

	private string nickname = string.Empty;

	private int[] totalStars = new int[7];

	private float[] stageScores = new float[7];

	private float totalScore;

	private int numOfTried;

	private int lastestMapIndex;

	public int battleMapIndex;

	private string command = string.Empty;

	private bool isCommand;

	public string baseUrl;

	public string authPath;

	public string resultPath;

	public string contestId;

	public string leagueId;

	public bool isStarter;

	public bool isMaster;

	public bool muteAll;

	public float bgmVolume = 1f;

	public float sfxVolume = 1f;

	private Dictionary<string, List<TimeRange>> featureSchedules = new Dictionary<string, List<TimeRange>>();

	private string logPath;

	public bool IsAutoMode { get; set; }

	public bool GameFinished { get; private set; }

	public string MatchWinner { get; private set; } = "";

	public string EndReason { get; private set; } = "";

	public event Action OnAudioSettingsChanged;

	public void AddSchedule(string feature, DateTime start, DateTime end)
	{
		if (!featureSchedules.ContainsKey(feature))
		{
			featureSchedules[feature] = new List<TimeRange>();
		}
		featureSchedules[feature].Add(new TimeRange
		{
			Start = start,
			End = end
		});
	}

	public bool IsFeatureActive(string feature, DateTime now)
	{
		if (!featureSchedules.ContainsKey(feature))
		{
			return false;
		}
		foreach (TimeRange item in featureSchedules[feature])
		{
			if (item.IsActive(now))
			{
				return true;
			}
		}
		return false;
	}

	public void SetMatchResult(string winner, string reason)
	{
		MatchWinner = winner;
		EndReason = reason;
		GameFinished = true;
	}

	public void ResetMatchResult()
	{
		MatchWinner = "";
		EndReason = "";
		GameFinished = false;
	}

	private void Awake()
	{
		if (manager == null)
		{
			manager = this;
			UnityEngine.Object.DontDestroyOnLoad(base.gameObject);
			try
			{
				string directoryName = Path.GetDirectoryName(Application.dataPath);
				logPath = Path.Combine(directoryName, "battle_ssafy.log");
			}
			catch
			{
				logPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "battle_ssafy.log");
			}
			WriteLog("INFO", "Application launched.");
		}
		else
		{
			UnityEngine.Object.Destroy(base.gameObject);
		}
	}

	private void Start()
	{
		AddSchedule("Program", new DateTime(2025, 9, 1, 0, 0, 0), new DateTime(2025, 10, 3, 23, 59, 59));
		AddSchedule("Stage1", new DateTime(2025, 9, 18, 9, 0, 0), new DateTime(2025, 9, 21, 23, 59, 59));
		AddSchedule("Stage1", new DateTime(2025, 9, 22, 9, 30, 0), new DateTime(2025, 9, 22, 12, 30, 0));
		AddSchedule("Stage2", new DateTime(2025, 9, 22, 9, 30, 0), new DateTime(2025, 9, 22, 12, 30, 0));
		AddSchedule("Stage3", new DateTime(2025, 9, 22, 9, 30, 0), new DateTime(2025, 9, 22, 12, 30, 0));
		AddSchedule("Stage4", new DateTime(2025, 9, 22, 9, 30, 0), new DateTime(2025, 9, 22, 12, 30, 0));
		AddSchedule("Stage5", new DateTime(2025, 9, 22, 9, 30, 0), new DateTime(2025, 9, 22, 12, 30, 0));
		AddSchedule("Stage6", new DateTime(2025, 9, 22, 9, 30, 0), new DateTime(2025, 9, 22, 12, 30, 0));
		AddSchedule("GoTest", new DateTime(2025, 9, 18, 16, 0, 0), new DateTime(2025, 9, 18, 19, 0, 0));
		AddSchedule("GoTest", new DateTime(2025, 9, 22, 9, 30, 0), new DateTime(2025, 9, 22, 23, 0, 0));
	}

	public void SetMute(bool isMuted)
	{
		muteAll = isMuted;
		this.OnAudioSettingsChanged?.Invoke();
	}

	public void SetBGMVolume(float volume)
	{
		bgmVolume = volume;
		this.OnAudioSettingsChanged?.Invoke();
	}

	public bool CanPlayBGM()
	{
		if (!muteAll)
		{
			return bgmVolume > 0f;
		}
		return false;
	}

	public MODE GetMode()
	{
		return currentMode;
	}

	public void SetMode(MODE mode)
	{
		currentMode = mode;
	}

	public STATE GetState()
	{
		return currentState;
	}

	public void SetState(STATE state)
	{
		currentState = state;
	}

	public PROCEED GetProceed()
	{
		return currentProceed;
	}

	public void SetProceed(PROCEED proceed)
	{
		currentProceed = proceed;
	}

	public NETWORK GetNetwork()
	{
		return currentNetwork;
	}

	public void SetNetwork(NETWORK network)
	{
		currentNetwork = network;
	}

	public int GetConnectingClient()
	{
		return connectingClient;
	}

	public void SetConnectingClient(int clientNo)
	{
		connectingClient = clientNo;
	}

	public int GetCurrentWIdth()
	{
		return currentWidth;
	}

	public int GetCurrentHeight()
	{
		return currentHeight;
	}

	public bool GetIsFullscreen()
	{
		return isFullscreen;
	}

	public void ChangeResolution(int width, int height, bool isFullscreen)
	{
		Screen.SetResolution(width, height, isFullscreen);
	}

	public void ChangeFullscreen()
	{
		isFullscreen = !isFullscreen;
		currentWidth = (isFullscreen ? 1920 : 1280);
		currentHeight = (isFullscreen ? 1080 : 720);
		Screen.SetResolution(currentWidth, currentHeight, isFullscreen);
		Debug.Log($"[GAME MANAGER] Change resolution (Full screen: {isFullscreen})");
	}

	public int GetCurrentStage()
	{
		return currentStage;
	}

	public void SetCurrentStage(int stage)
	{
		currentStage = stage;
	}

	public int GetCurrentSpeed()
	{
		return currentSpeed;
	}

	public void SetCurrentSpeed(int speed)
	{
		currentSpeed = speed;
	}

	public int GetCurrentPlayer()
	{
		return currentPlayer;
	}

	public void SetCurrentPlayer(int currentPlayer)
	{
		this.currentPlayer = currentPlayer;
	}

	public int GetCurrentStars()
	{
		return currentStars;
	}

	public void SetCurrentStars(int stars)
	{
		currentStars = stars;
	}

	public string GetNickname()
	{
		return nickname;
	}

	public void SetNickname(string nickname)
	{
		this.nickname = nickname;
	}

	public string GetCommand()
	{
		return command;
	}

	public void SetCommand(string command)
	{
		Debug.Log("[GAME MANAGER] Set command: " + command + " (from connected client)");
		this.command = command;
	}

	public bool GetIsCommand()
	{
		return isCommand;
	}

	public void SetIsCommand(bool isCommand)
	{
		Debug.Log($"[GAME MANAGER] Command Queue: {isCommand}");
		this.isCommand = isCommand;
	}

	public void ClearCommand()
	{
		Debug.Log("[GAME MANAGER] Clear command");
		command = string.Empty;
		isCommand = false;
	}

	public bool IsTurnGoing()
	{
		return isTurnGoing;
	}

	public void SetTurnGoing(bool pass)
	{
		isTurnGoing = pass;
	}

	public bool IsTurnPassed()
	{
		return isTurnPassed;
	}

	public void SetTurnPass(bool pass)
	{
		isTurnPassed = pass;
	}

	public Team GetTeam()
	{
		return team;
	}

	public void SetTeam(string teamId, string teamKey)
	{
		team = new Team(teamId, teamKey);
	}

	public User GetUser()
	{
		return user;
	}

	public void SetUser(string username, string userId, string clssName)
	{
		user = new User(username, userId, clssName);
	}

	public int[] GetTotalStars()
	{
		return totalStars;
	}

	public int GetStageStars(int stageNo)
	{
		return totalStars[stageNo];
	}

	public int GetTotalStarCount()
	{
		int num = 0;
		for (int i = 0; i < totalStars.Length; i++)
		{
			num += totalStars[i];
		}
		return num;
	}

	public string GetTotalStarString()
	{
		return string.Join(", ", totalStars);
	}

	public void SetStageStars(int stageNo, int numOfStars)
	{
		totalStars[stageNo] = numOfStars;
	}

	public void ClearTotalStars()
	{
		totalStars = new int[7];
	}

	public double GetStageScore(int stageNo)
	{
		return stageScores[stageNo];
	}

	public void SetStageScore(int stageNo, float score)
	{
		stageScores[stageNo] = score;
	}

	public void ClearStageScores()
	{
		stageScores = new float[7];
	}

	public float GetTotalScore()
	{
		return totalScore;
	}

	public void SetTotalScore(float score)
	{
		totalScore = score;
	}

	public int GetTrial()
	{
		return numOfTried;
	}

	public void SetTrial(int trial)
	{
		numOfTried = trial;
	}

	public int GetLatestMapIndex()
	{
		return lastestMapIndex;
	}

	public void SetLatestMapIndex(int mapIndex)
	{
		lastestMapIndex = mapIndex;
	}

	public string GetGameVersion()
	{
		return $"{1}.{1}.{11}";
	}

	public void WriteLog(string logLevel, string log)
	{
		try
		{
			string text = DateTime.Now.ToString("yyyyMMdd.HHmmss");
			using StreamWriter streamWriter = new StreamWriter(logPath, append: true);
			streamWriter.WriteLine("[" + text + "][" + logLevel + "] " + log);
		}
		catch (Exception ex)
		{
			Debug.LogError("[LogError] Failed to write log: " + ex.Message);
		}
	}
}
